/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { Public } from "../../decorators/public.decorator";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Version } from "./Version";
import { VersionCountArgs } from "./VersionCountArgs";
import { VersionFindManyArgs } from "./VersionFindManyArgs";
import { VersionFindUniqueArgs } from "./VersionFindUniqueArgs";
import { CreateVersionArgs } from "./CreateVersionArgs";
import { UpdateVersionArgs } from "./UpdateVersionArgs";
import { DeleteVersionArgs } from "./DeleteVersionArgs";
import { Generator } from "../../generator/base/Generator";
import { VersionService } from "../version.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Version)
export class VersionResolverBase {
  constructor(
    protected readonly service: VersionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _versionsMeta(
    @graphql.Args() args: VersionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @Public()
  @graphql.Query(() => [Version])
  async versions(
    @graphql.Args() args: VersionFindManyArgs
  ): Promise<Version[]> {
    return this.service.versions(args);
  }

  @Public()
  @graphql.Query(() => Version, { nullable: true })
  async version(
    @graphql.Args() args: VersionFindUniqueArgs
  ): Promise<Version | null> {
    const result = await this.service.version(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Version)
  @nestAccessControl.UseRoles({
    resource: "Version",
    action: "create",
    possession: "any",
  })
  async createVersion(
    @graphql.Args() args: CreateVersionArgs
  ): Promise<Version> {
    return await this.service.createVersion({
      ...args,
      data: {
        ...args.data,

        generator: args.data.generator
          ? {
              connect: args.data.generator,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Version)
  @nestAccessControl.UseRoles({
    resource: "Version",
    action: "update",
    possession: "any",
  })
  async updateVersion(
    @graphql.Args() args: UpdateVersionArgs
  ): Promise<Version | null> {
    try {
      return await this.service.updateVersion({
        ...args,
        data: {
          ...args.data,

          generator: args.data.generator
            ? {
                connect: args.data.generator,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Version)
  @nestAccessControl.UseRoles({
    resource: "Version",
    action: "delete",
    possession: "any",
  })
  async deleteVersion(
    @graphql.Args() args: DeleteVersionArgs
  ): Promise<Version | null> {
    try {
      return await this.service.deleteVersion(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => Generator, {
    nullable: true,
    name: "generator",
  })
  async getGenerator(
    @graphql.Parent() parent: Version
  ): Promise<Generator | null> {
    const result = await this.service.getGenerator(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
